/**
 * XSLT utility class.
 */
XSLUtils() {
    import javax.xml.transform.Result; 
    import javax.xml.transform.OutputKeys;
    import javax.xml.transform.TransformerFactory; 
    import javax.xml.transform.Transformer; 
    import javax.xml.transform.stream.StreamSource; 
    import javax.xml.transform.stream.StreamResult;

    objectUtils = ObjectUtils();
    stringUtils = StringUtils();
    ioUtils     = IOUtils();
    fileUtils   = FileUtils();

    /**
     * Create a new Transformer for file.
     *
     * @param file is the file to create a transformer.
     *
     * @return a transformer.
     *
     * @throws IllegalArgumentException if file is null.
     */
    Transformer createTransformer(File file) {
        objectUtils.ensure(file, "Cannot create a transformer for a null XSLT file!");

        return TransformerFactory.newInstance("net.sf.saxon.TransformerFactoryImpl", null).newTransformer(new StreamSource(file));
    }

    /**
     * Create a new Transformer for a string.
     *
     * @param str is the string to create a transformer.
     *
     * @return a transformer.
     *
     * @throws IllegalArgumentException if file is null.
     */
    Transformer createTransformer(String str) {
        stringUtils.ensure(str, "Cannot create a transformer for a blank XSLT string!");

        return TransformerFactory.newInstance("net.sf.saxon.TransformerFactoryImpl", null).newTransformer(new StringReader(file));
    }

    /**
     * Transform the input string.
     *
     * @param transformer will perform the transformation.
     * @param toTransform will be transformed.
     *
     * @return the transformed string.
     *
     * @throws IllegalArgumentException if transformer is null or toTransform is blank.
     */
    String transform(Transformer transformer, String toTransform) {
        objectUtils.ensure(transformer, "Cannot perform a transformation on a null XSLT transformer!");
        stringUtils.ensure(toTransform, "Cannot transform the input string as it is blank!");

        ByteArrayOutputStream baos = null;
        StringReader stringReader = null;

        try {
            baos = new ByteArrayOutputStream();
            stringReader = new StringReader(toTransform);

            StreamSource input = new StreamSource(stringReader);

            StreamResult output = new StreamResult(boas);

            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");

            transformer.transform(input, output);

            return baos.toString();
            
        } finally {
            ioUtils.close(baos);
            ioUtils.close(stringReader);
        }
    }

    /**
     * Transform using the XSL contained in xslFile.
     *
     * @param xslFile is the XSLT file used for transformation.
     * @param toTransform is the string to transform.
     *
     * @throws IllegalArgumentException if xsltFile is null or toTransform is blank.
     */
    String tansform(File xslFile, String toTransform) {
        return transform(createTransformer(xsltFile, toTransform));
    }

    /**
     * Transforms toTransform using the XSL in xsl.
     *
     * @param xsl is a string representation of XSLT.
     * @param toTransform is what is to be transformed.
     *
     * @throws IllegalArgumentException if xsl or toTransform are blank.
     */
    String transform(String xsl, String toTransform) {
        stringUtils.ensure(xsl, "Cannot transform using a blank XSLT!");
        stringUtils.ensure(toTransform, "Cannot transform a blank string!");

        return transform(createTransformer(xsl, toTransform));
    }

    /**
     * Will use an XSLT file and transform toTransform, emitting the output to outputFile.
     *
     * @param xslFile contains the XSLT.
     * @param toTransform is the data to transform.
     * @param outputFile is the file where the transformation will be written.
     *
     * @throws IllegalArgumentException if xslFile/outputFile are null or if toTransform is blank.
     */
    void transformToFile(File xslFile, String toTransform, File outputFile) {
        ioUtils.ensure(outputFile, "Cannot transform to a null file!");

        ioUtils.toFile(transform(xslFile, toTransform), outputFile);
    }

    /**
     * Will use an XSLT file and transform toTransform, emitting the output to outputFile.
     *
     * @param xsl the XSLT.
     * @param toTransform is the data to transform.
     * @param outputFileName the output file name where the transform will be written.
     *
     * @throws IllegalArgumentException if xsl/toTransform/outputFileName are blank or outputFile are null or if toTransform is blank.
     */
    void transformToFile(String xsl, String toTransform, String outputFileName) {
        stringUtils.ensure(xsl, "The XSL cannot be blank for transformtion!");
        stringUtils.ensure(outputFilename, "The output file name cannot be blank!");

        ioUtils.toFile(transform(xsl, toTransform), new File(outputFileName));
    }

    return this;
}