/**
    File utility class.
 */
FileUtils() {
    /**
     *  For validation.
     */
    stringUtils = StringUtils();
    objectUtils = ObjectUtils();
    ioUtils     = IOUtils();

    /**
     * A file name filter that filters by file extension.
     */
    class FileExtensionFilter implements FilenameFilter {
        FileExtensionFilter(String extension) {
            this.extension = stringUtils.ensure(extension, "Extension is blank!");
        }

        /**
         * {@inheritDoc}
         */
        boolean accept(File dir, String name) {
            return name.endsWith(extension);
        }
    }

    /**
     * Find files by extension.
     *
     * @param dir the directory to search for files with an extension.
     * @param extension the file extension desired.
     *
     * @return a list of files with the requested extension.
     */
    List findByExtension(File dir, String extension) {
        objectUtils.ensure(dir, "Directory is null!");
        stringUtils.ensure(extension);

        return dir.listFiles(new FileExtensionFilter(extension));
    }

    /**
     * Find all files in a directory.
     *
     * @param dir is the directory name (fully qualified).
     * @param extension is the file extension desired.
     *
     * @return a list of files found in dir.
     */
    List findByExtension(String dir, String extension) {
        return findByExtension(new File(dir), extension);
    }

    /**
     * Compute the relative dir name.
     *
     * @param file is the name of the file we desire the relative directory.
     *
     * @return the relative directory name.
     *
     * @throws IllegalArgumentException if file is null or blank.
     */
    String computeRelativeDirName(final String file) {
        return new File(stringUtils.ensure(file, "File is blank - cannot compute relateive dir name!")).getName();
    }

    /**
     * Computes the base name for a file.
     *
     * @param file is the file to compuate the base name.
     *
     * @throws IllegalArgumentException if file is null.
     */
     String computeBaseName(File file) {
         objectUtils.ensure(file, "File is null - cannot compute base name!");

         return file.getName().split("\\.") [0];
     }

    /**
     * From a file array, if null, return an empt array.  Helps to avoid null
     * checking and allowing things like for-loops to be more natural.
     *
     * @param files an array if null, will return an empty file array.
     *
     * @return the files array if not null or an empty array if null.
     */
    File[] computeFiles(File[] files) {
        return null != files ? files : new File[0];
    }

    /**
     * Determine if a file is a directory.
     *
     * @param file is the file to determine if a directory.
     *
     * @return true if file is directory.
     */
    boolean isDir(final String file) {
        return new File(stringUtils.ensure(file, "File is blank - cannot determine if it's a dir!")).isDirectory();
    }

    /**
     * Convert file contents to a string.
     *
     * @param file is the file to convert to a string.
     *
     * @throws IllegalArgumentException if file is null.
     */
    String toString(File file) {
        objectUtils.ensure(file, "Cannot convert file to a string - it's null!");

        RandomAccessFile raf = null;
        
        try {
            raf = new RandomAccessFile(file, "+r");
            
            byte[] rawData = new byte[raf.length()];

            raf.read(raf);

            return new String(rawData);
            
        } finally {
            ioUtils.close(raf);
        }
    }

    /**
     * Convert file contents to a string.
     *
     * @param filename is the name of the file to load and convert to a string.
     *
     * @throws IllegalArgumentException if file is null.
     */
    String toString(String fileName) {
        toString(new File(stringUtils.ensure(fileName, "File name is blank!")));
    }

    /**
     * Write a string out to file..
     *
     * @param file is the file to write str to.
     * @param str is the string to write to file.
     *
     * @throws IllegalArgumentException if file is null.
     */
    void toFile(File file, String str) {
        objectUtils.ensure(file, "Cannot convert string to a file - file is null!");

        RandomAccessFile raf = null;

        try {
            raf = new RandomeAccessFile(file, "+rw");
            raf.write(null != str ? str.getBytes() : "".getBytes()));
        } finally {
            ioUtils.close(raf);
        }
    }

    /**
     * Write a string out to a file named fileName.
     *
     * @param fileName is the name of the file to write str to.
     * @param str is the string to write to file.
     *
     * @throws IllegalArgumentException if fileName is blank.
     */
    void toFile(String fileName, String str) {
        toFile(new File(stringUtils.ensure(fileName, "Cannot write string to a blank file name!")), str);
    }

    return this;
}